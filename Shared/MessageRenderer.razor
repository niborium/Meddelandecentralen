@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<MessageFilter @bind-chatToggler="_chatToggler" @bind-aoToggler="_aoToggler" />

<BSContainer Container="Container.Fluid" style="display: flex; text-align: center; align-items: center; justify-content: center; flex-direction: column">
    @foreach (var message in messages)
    {
      @if(message.Contains("Arbetsorder"))
      {
        var id = message.Substring(1,36);
        var idf = message.Substring(0,40);
        var messagewithoutid = message.Replace(idf, "");
        string meddelande = messagewithoutid.Split(new string[]{"Meddelande:"}, StringSplitOptions.None).Last();
        var title = messagewithoutid.Replace(meddelande,"").Replace("Meddelande:","");
      <BSCard CardType="CardType.Card" class="aoCard"  style="width: 18rem; background-color: #ADD8E6; margin-bottom: 1rem;">
      <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Title">@title</BSCard>
        <BSCard CardType="CardType.Text">
          <b>Ärendebeskrivning:</b><br><br/>
          @meddelande
          <br><br />
          <BSModal DataId="modalinvestigate">
            <Header>Under utredning</Header>
            <Content>
              Vill du markera @id som under utredning och tilldela dig till uppgiften?<br><br/>
              Ange ditt namn: <input @bind="caseManager" /><br><br/>
              <p style="color: red">@casemanagerMessage</p
            </Content>
            <Footer Context="modal">
            <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Stäng</BSButton>
            <BSButton Color="BSColor.Warning" @onclick="() => SendInvestigate(id, modal.HideAsync)">Tilldela mig arbetsordern</BSButton>
            </Footer>
            </BSModal>
            @if(!(message.Contains("Under utredning") || message.Contains("Åtgärdad")))
            {
              <BSButton Color="BSColor.Warning" Target="modalinvestigate">Under utredning</BSButton>
            }

          <BSModal DataId="modaldone">
            <Header>Åtgärdad</Header>
            <Content>
              Vill du markera @id som åtgärdad och slutföra arbetsorden?<br><br/>
              Ange ditt namn: <input @bind="caseManager" />
              <p style="color: red">@casemanagerMessage</p>
            </Content>
            <Footer Context="modal">
            <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Stäng</BSButton>
            <BSButton Color="BSColor.Success" @onclick="() => SendDone(id, modal.HideAsync)">Åtgärda arbetsorder</BSButton>
            </Footer>
            </BSModal>
            @if(!message.Contains("Åtgärdad"))
            {
              <BSButton Color="BSColor.Success" Target="modaldone">Åtgärdad</BSButton>
            }
        </BSCard>
      </BSCard>
      </BSCard>     
      }
      else {
        string meddelande = message.Split(new string[]{"Meddelande:"}, StringSplitOptions.None).Last();
        var title = message.Replace(meddelande,"").Replace("Meddelande:","");
        
      <BSCard CardType="CardType.Card" class="chatCard" style="width: 18rem; background-color: #FFFFE0; margin-bottom: 1rem;">
      <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Title">@title</BSCard>
        <BSCard CardType="CardType.Text">
            @meddelande
        </BSCard>
      </BSCard>
      </BSCard>
      }
    }
</BSContainer>
<style type="text/css">
    .chatCard
    {
      display: @(_chatToggler); 
    }
    .aoCard
    {
      display: @(_aoToggler); 
    }
</style>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? caseManager;
    private string? casemanagerMessage;

    private string? _aoToggler;
    private string? _chatToggler;


    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Models.MessageModel>("ReceiveWorkorder", (workorder) =>
        { 
            var encodedMsg = $"[{workorder.Id}] - [{workorder.Date}] - [Arbetsorder]: Rum: {workorder.Room} - Publicerad av: {workorder.Author} - Status: {workorder.Status} - Tilldelad till: {workorder.Assigned} Meddelande: {workorder.Message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<Models.MessageModel>("ReceiveChat", (chat) =>
        { 
            var encodedMsg = $"[{chat.Date}] - [Chatt]: - Publicerad av: {chat.Author} Meddelande: {chat.Message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string, string, string>("ReceiveInvestigate", (id, casemanager, status) =>
        { 
          int index = messages.FindIndex(ind => ind.Contains(id));
          var updated = messages[index].Replace("Ej tilldelad", casemanager).Replace("Ej påbörjad", status);
          messages.RemoveAt(index);
          messages.Insert(index, updated);
          InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string, string, string>("ReceiveDone", (id, casemanager, status) =>
        { 
          int index = messages.FindIndex(ind => ind.Contains(id));
          var updated = messages[index].Replace("Tilldelad till", "Utredd av").Replace("Ej tilldelad", casemanager).Replace("Ej påbörjad", status).Replace("Under utredning", status + " av " +casemanager);
          messages.RemoveAt(index);
          messages.Insert(index, updated);
          InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    private async Task SendInvestigate(string caseId, Delegate hidemodal)
    {
      if (hubConnection is not null)
      {
        if(caseManager?.Count() > 1){
          await hubConnection.SendAsync("SendInvestigate", caseId, caseManager);
          caseManager = "";
          hidemodal.DynamicInvoke();
        }
        else {
          casemanagerMessage = "Du måste fylla i ditt namn som handläggare innan du kan skicka.";
        }
      }
    }
    private async Task SendDone(string caseId, Delegate hidemodal)
    {
      if (hubConnection is not null)
      {
        if(caseManager?.Count() > 1){
          await hubConnection.SendAsync("SendDone", caseId, caseManager);
          caseManager = "";
          hidemodal.DynamicInvoke();
        }
        else {
          casemanagerMessage = "Du måste fylla i ditt namn som handläggare innan du kan skicka.";
        }
      }
    }
    public bool IsConnected =>
      hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
      if (hubConnection is not null)
      {
        await hubConnection.DisposeAsync();
      }
    }
}