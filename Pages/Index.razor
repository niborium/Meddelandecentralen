@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Meddelandecentralen</PageTitle>

<BSCollapse>
    <Toggler><BSToggle IsButton="true" Color="BSColor.Primary" style="float: right;">Nytt meddelande</BSToggle></Toggler>
    <Content>
        <br /><br />
        <BSCard CardType="CardType.Card" style="width:21.5rem; background-color: #77CCFF; text-align: center; float:right;">
            <form id="messagetype-options">
            <div class="form-group">
              <label for="msgt">Meddelandetyp:</label><br />
              <select id="msgt" name="msgt" @onchange="OnDropdownChange">
              <option value="Chat">Chatt</option>
              <option value="Arbetsorder">Arbetsorder</option>
              </select>
            </div>
            </form>
            @if (messagetypeInput == "Arbetsorder")
            {
            <div class="form-group">
              <label>
              Rum:<br />
              <input @bind="roomInput" />
              </label>
              </div>
            }
            <div class="form-group">
              <label>
              Ditt namn:
              <input @bind="authorInput" style="width: 21.5rem;"/>
              </label>
              </div>
            <div class="form-group">
              <label>
              Meddelande:<br />
              <textarea @bind="messageInput" cols="40" rows="5"></textarea>
              </label>
            </div>
            <BSButton Color="BSColor.Primary" @onclick="Send" disabled="@(!IsConnected)" style="width:50%; position: relative; left: 5rem;">Skicka</BSButton>
            <p style="color: red">@infoMessage</p>
        </BSCard>
    </Content>
</BSCollapse>
<hr>
<BSContainer Container="Container.Fluid" style="display: flex; text-align: center; align-items: center; justify-content: center; margin-bottom: 1rem;">
  <label for="filter">Filtrera:</label><br />
  <select id="filter" name="filter" @onchange="OnFilterChange">
  <option value="Filter-Alla">Alla</option>
  <option value="Filter-Arbetsordrar">Visa alla arbetsordrar</option>
  <option value="Filter-Chattar">Visa alla chattar</option>
  </select>
</BSContainer>
<BSContainer Container="Container.Fluid" style="display: flex; text-align: center; align-items: center; justify-content: center; flex-direction: column">
    @foreach (var message in messages)
    {
      @if(message.Contains("Arbetsorder"))
      {
        var id = message.Substring(1,36);
        var idf = message.Substring(0,40);
        var messagewithoutid = message.Replace(idf, "");
      <BSCard CardType="CardType.Card" class="aoCard"  style="width: 18rem; background-color: #ADD8E6; margin-bottom: 1rem;">
      <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Title">Arbetsorder</BSCard>
        <BSCard CardType="CardType.Text">
          @messagewithoutid
          <br><br />
          <BSModal DataId="modalinvestigate">
            <Header>Under utredning</Header>
            <Content>
              Vill du markera @id som under utredning och tilldela dig till uppgiften?<br><br/>
              Ange ditt namn: <input @bind="caseManager" /><br><br/>
              <p style="color: red">@casemanagerMessage</p
            </Content>
            <Footer Context="modal">
            <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Stäng</BSButton>
            <BSButton Color="BSColor.Warning" @onclick="() => SendInvestigate(id)">Tilldela mig arbetsordern</BSButton>
            </Footer>
            </BSModal>
            @if(!(message.Contains("Under utredning") || message.Contains("Åtgärdad")))
            {
              <BSButton Color="BSColor.Warning" Target="modalinvestigate">Under utredning</BSButton>
            }

          <BSModal DataId="modaldone">
            <Header>Åtgärdad</Header>
            <Content>
              Vill du markera @id som åtgärdad och slutföra arbetsorden?<br><br/>
              Ange ditt namn: <input @bind="caseManager" />
              <p style="color: red">@casemanagerMessage</p>
            </Content>
            <Footer Context="modal">
            <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Stäng</BSButton>
            <BSButton Color="BSColor.Success" @onclick="() => SendDone(id)">Åtgärda arbetsorder</BSButton>
            </Footer>
            </BSModal>
            @if(!message.Contains("Åtgärdad"))
            {
              <BSButton Color="BSColor.Success" Target="modaldone">Åtgärdad</BSButton>
            }
        </BSCard>
      </BSCard>
      </BSCard>     
      }
      else {
      <BSCard CardType="CardType.Card" class="chatCard" style="width: 18rem; background-color: #FFFFE0; margin-bottom: 1rem;">
      <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Title">Chatt</BSCard>
        <BSCard CardType="CardType.Text">
            @message
        </BSCard>
      </BSCard>
      </BSCard>
      }
    }
</BSContainer>
<style type="text/css">
    .chatCard
    {
      display: @(chatToggler); 
    }
    .aoCard
    {
      display: @(aoToggler); 
    }
</style>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messagetypeInput;
    private string? roomInput;
    private string? authorInput;
    private string? messageInput;
    private string? infoMessage;
    private string? caseManager;
    private string? casemanagerMessage;

    private string? aoToggler = "initial";
    private string? chatToggler = "initial";

    private void OnDropdownChange(ChangeEventArgs e)
    {
      messagetypeInput = e.Value?.ToString();
      roomInput = "";
      authorInput = "";
      messageInput = "";
      infoMessage = "";
    }
    private void OnFilterChange(ChangeEventArgs e)
    {
      string ?userchoice = e.Value?.ToString();
      if(userchoice == "Filter-Arbetsordrar"){
        aoToggler = "initial";
        chatToggler = "none"; 
      }
      if(userchoice == "Filter-Chattar"){
        aoToggler = "none";
        chatToggler = "initial"; 
      }
      if(userchoice == "Filter-Alla"){
        aoToggler = "initial";
        chatToggler = "initial"; 
      }
    }

    protected override async Task OnInitializedAsync()
    {
        messagetypeInput = "Chat";

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string, string, string, string, string, string>("ReceiveMessage", (id, date, messagetype, room, author, message, status, assigned) =>
        { 
          if(messagetype == "Arbetsorder"){
            var encodedMsg = $"[{id}] - [{date}] - [{messagetype}]: Rum: {room} - Publicerad av: {author} - Meddelande: {message} - Status: {status} - Tilldelad till: {assigned}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
          } else {
            var encodedMsg = $"[{date}] - [{messagetype}]: - Publicerad av: {author} - Meddelande: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
          }
        });
        hubConnection.On<string, string, string>("ReceiveInvestigate", (id, casemanager, status) =>
        { 
          int index = messages.FindIndex(ind => ind.Contains(id));
          var updated = messages[index].Replace("Ej tilldelad", casemanager).Replace("Ej påbörjad", status);
          messages.RemoveAt(index);
          messages.Insert(index, updated);
          InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string, string, string>("ReceiveDone", (id, casemanager, status) =>
        { 
          int index = messages.FindIndex(ind => ind.Contains(id));
          var updated = messages[index].Replace("Tilldelad till", "Utredd av").Replace("Ej tilldelad", casemanager).Replace("Ej påbörjad", status).Replace("Under utredning", status + " av " +casemanager);
          messages.RemoveAt(index);
          messages.Insert(index, updated);
          InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
      if (hubConnection is not null)
      {
        if(authorInput?.Count() > 1 && messageInput?.Count() > 1){
          await hubConnection.SendAsync("SendMessage", messagetypeInput, roomInput, authorInput, messageInput);
          roomInput = "";
          messageInput = "";
        }
        else {
          infoMessage = "Du måste fylla i båda fälten Ditt namn och Meddelande ovan för att skicka meddelandet.";
        }
      }
    }
    private async Task SendInvestigate(string caseId)
    {
      if (hubConnection is not null)
      {
        if(caseManager?.Count() > 1){
          await hubConnection.SendAsync("SendInvestigate", caseId, caseManager);
          caseManager = "";
        }
        else {
          casemanagerMessage = "Du måste fylla i ditt namn som handläggare innan du kan skicka.";
        }
      }
    }
    private async Task SendDone(string caseId)
    {
      if (hubConnection is not null)
      {
        if(caseManager?.Count() > 1){
          await hubConnection.SendAsync("SendDone", caseId, caseManager);
          caseManager = "";
        }
        else {
          casemanagerMessage = "Du måste fylla i ditt namn som handläggare innan du kan skicka.";
        }
      }
    }
    public bool IsConnected =>
      hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
      if (hubConnection is not null)
      {
        await hubConnection.DisposeAsync();
      }
    }
}